{"version":3,"file":"789.plugin.js","mappings":"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","sources":["webpack://sillytavern-cloud-sync/./node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveCredentialSource.js","webpack://sillytavern-cloud-sync/./node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveAssumeRoleCredentials.js","webpack://sillytavern-cloud-sync/./node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveStaticCredentials.js","webpack://sillytavern-cloud-sync/./node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveProfileData.js","webpack://sillytavern-cloud-sync/./node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveWebIdentityCredentials.js","webpack://sillytavern-cloud-sync/./node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveProcessCredentials.js","webpack://sillytavern-cloud-sync/./node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveSsoCredentials.js","webpack://sillytavern-cloud-sync/./node_modules/@aws-sdk/credential-provider-ini/dist-es/fromIni.js"],"sourcesContent":["import { setCredentialFeature } from \"@aws-sdk/core/client\";\nimport { chain, CredentialsProviderError } from \"@smithy/property-provider\";\nexport const resolveCredentialSource = (credentialSource, profileName, logger) => {\n    const sourceProvidersMap = {\n        EcsContainer: async (options) => {\n            const { fromHttp } = await import(\"@aws-sdk/credential-provider-http\");\n            const { fromContainerMetadata } = await import(\"@smithy/credential-provider-imds\");\n            logger?.debug(\"@aws-sdk/credential-provider-ini - credential_source is EcsContainer\");\n            return async () => chain(fromHttp(options ?? {}), fromContainerMetadata(options))().then(setNamedProvider);\n        },\n        Ec2InstanceMetadata: async (options) => {\n            logger?.debug(\"@aws-sdk/credential-provider-ini - credential_source is Ec2InstanceMetadata\");\n            const { fromInstanceMetadata } = await import(\"@smithy/credential-provider-imds\");\n            return async () => fromInstanceMetadata(options)().then(setNamedProvider);\n        },\n        Environment: async (options) => {\n            logger?.debug(\"@aws-sdk/credential-provider-ini - credential_source is Environment\");\n            const { fromEnv } = await import(\"@aws-sdk/credential-provider-env\");\n            return async () => fromEnv(options)().then(setNamedProvider);\n        },\n    };\n    if (credentialSource in sourceProvidersMap) {\n        return sourceProvidersMap[credentialSource];\n    }\n    else {\n        throw new CredentialsProviderError(`Unsupported credential source in profile ${profileName}. Got ${credentialSource}, ` +\n            `expected EcsContainer or Ec2InstanceMetadata or Environment.`, { logger });\n    }\n};\nconst setNamedProvider = (creds) => setCredentialFeature(creds, \"CREDENTIALS_PROFILE_NAMED_PROVIDER\", \"p\");\n","import { setCredentialFeature } from \"@aws-sdk/core/client\";\nimport { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { getProfileName } from \"@smithy/shared-ini-file-loader\";\nimport { resolveCredentialSource } from \"./resolveCredentialSource\";\nimport { resolveProfileData } from \"./resolveProfileData\";\nexport const isAssumeRoleProfile = (arg, { profile = \"default\", logger } = {}) => {\n    return (Boolean(arg) &&\n        typeof arg === \"object\" &&\n        typeof arg.role_arn === \"string\" &&\n        [\"undefined\", \"string\"].indexOf(typeof arg.role_session_name) > -1 &&\n        [\"undefined\", \"string\"].indexOf(typeof arg.external_id) > -1 &&\n        [\"undefined\", \"string\"].indexOf(typeof arg.mfa_serial) > -1 &&\n        (isAssumeRoleWithSourceProfile(arg, { profile, logger }) || isCredentialSourceProfile(arg, { profile, logger })));\n};\nconst isAssumeRoleWithSourceProfile = (arg, { profile, logger }) => {\n    const withSourceProfile = typeof arg.source_profile === \"string\" && typeof arg.credential_source === \"undefined\";\n    if (withSourceProfile) {\n        logger?.debug?.(`    ${profile} isAssumeRoleWithSourceProfile source_profile=${arg.source_profile}`);\n    }\n    return withSourceProfile;\n};\nconst isCredentialSourceProfile = (arg, { profile, logger }) => {\n    const withProviderProfile = typeof arg.credential_source === \"string\" && typeof arg.source_profile === \"undefined\";\n    if (withProviderProfile) {\n        logger?.debug?.(`    ${profile} isCredentialSourceProfile credential_source=${arg.credential_source}`);\n    }\n    return withProviderProfile;\n};\nexport const resolveAssumeRoleCredentials = async (profileName, profiles, options, visitedProfiles = {}) => {\n    options.logger?.debug(\"@aws-sdk/credential-provider-ini - resolveAssumeRoleCredentials (STS)\");\n    const profileData = profiles[profileName];\n    const { source_profile, region } = profileData;\n    if (!options.roleAssumer) {\n        const { getDefaultRoleAssumer } = await import(\"@aws-sdk/nested-clients/sts\");\n        options.roleAssumer = getDefaultRoleAssumer({\n            ...options.clientConfig,\n            credentialProviderLogger: options.logger,\n            parentClientConfig: {\n                ...options?.parentClientConfig,\n                region: region ?? options?.parentClientConfig?.region,\n            },\n        }, options.clientPlugins);\n    }\n    if (source_profile && source_profile in visitedProfiles) {\n        throw new CredentialsProviderError(`Detected a cycle attempting to resolve credentials for profile` +\n            ` ${getProfileName(options)}. Profiles visited: ` +\n            Object.keys(visitedProfiles).join(\", \"), { logger: options.logger });\n    }\n    options.logger?.debug(`@aws-sdk/credential-provider-ini - finding credential resolver using ${source_profile ? `source_profile=[${source_profile}]` : `profile=[${profileName}]`}`);\n    const sourceCredsProvider = source_profile\n        ? resolveProfileData(source_profile, profiles, options, {\n            ...visitedProfiles,\n            [source_profile]: true,\n        }, isCredentialSourceWithoutRoleArn(profiles[source_profile] ?? {}))\n        : (await resolveCredentialSource(profileData.credential_source, profileName, options.logger)(options))();\n    if (isCredentialSourceWithoutRoleArn(profileData)) {\n        return sourceCredsProvider.then((creds) => setCredentialFeature(creds, \"CREDENTIALS_PROFILE_SOURCE_PROFILE\", \"o\"));\n    }\n    else {\n        const params = {\n            RoleArn: profileData.role_arn,\n            RoleSessionName: profileData.role_session_name || `aws-sdk-js-${Date.now()}`,\n            ExternalId: profileData.external_id,\n            DurationSeconds: parseInt(profileData.duration_seconds || \"3600\", 10),\n        };\n        const { mfa_serial } = profileData;\n        if (mfa_serial) {\n            if (!options.mfaCodeProvider) {\n                throw new CredentialsProviderError(`Profile ${profileName} requires multi-factor authentication, but no MFA code callback was provided.`, { logger: options.logger, tryNextLink: false });\n            }\n            params.SerialNumber = mfa_serial;\n            params.TokenCode = await options.mfaCodeProvider(mfa_serial);\n        }\n        const sourceCreds = await sourceCredsProvider;\n        return options.roleAssumer(sourceCreds, params).then((creds) => setCredentialFeature(creds, \"CREDENTIALS_PROFILE_SOURCE_PROFILE\", \"o\"));\n    }\n};\nconst isCredentialSourceWithoutRoleArn = (section) => {\n    return !section.role_arn && !!section.credential_source;\n};\n","import { setCredentialFeature } from \"@aws-sdk/core/client\";\nexport const isStaticCredsProfile = (arg) => Boolean(arg) &&\n    typeof arg === \"object\" &&\n    typeof arg.aws_access_key_id === \"string\" &&\n    typeof arg.aws_secret_access_key === \"string\" &&\n    [\"undefined\", \"string\"].indexOf(typeof arg.aws_session_token) > -1 &&\n    [\"undefined\", \"string\"].indexOf(typeof arg.aws_account_id) > -1;\nexport const resolveStaticCredentials = async (profile, options) => {\n    options?.logger?.debug(\"@aws-sdk/credential-provider-ini - resolveStaticCredentials\");\n    const credentials = {\n        accessKeyId: profile.aws_access_key_id,\n        secretAccessKey: profile.aws_secret_access_key,\n        sessionToken: profile.aws_session_token,\n        ...(profile.aws_credential_scope && { credentialScope: profile.aws_credential_scope }),\n        ...(profile.aws_account_id && { accountId: profile.aws_account_id }),\n    };\n    return setCredentialFeature(credentials, \"CREDENTIALS_PROFILE\", \"n\");\n};\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { isAssumeRoleProfile, resolveAssumeRoleCredentials } from \"./resolveAssumeRoleCredentials\";\nimport { isProcessProfile, resolveProcessCredentials } from \"./resolveProcessCredentials\";\nimport { isSsoProfile, resolveSsoCredentials } from \"./resolveSsoCredentials\";\nimport { isStaticCredsProfile, resolveStaticCredentials } from \"./resolveStaticCredentials\";\nimport { isWebIdentityProfile, resolveWebIdentityCredentials } from \"./resolveWebIdentityCredentials\";\nexport const resolveProfileData = async (profileName, profiles, options, visitedProfiles = {}, isAssumeRoleRecursiveCall = false) => {\n    const data = profiles[profileName];\n    if (Object.keys(visitedProfiles).length > 0 && isStaticCredsProfile(data)) {\n        return resolveStaticCredentials(data, options);\n    }\n    if (isAssumeRoleRecursiveCall || isAssumeRoleProfile(data, { profile: profileName, logger: options.logger })) {\n        return resolveAssumeRoleCredentials(profileName, profiles, options, visitedProfiles);\n    }\n    if (isStaticCredsProfile(data)) {\n        return resolveStaticCredentials(data, options);\n    }\n    if (isWebIdentityProfile(data)) {\n        return resolveWebIdentityCredentials(data, options);\n    }\n    if (isProcessProfile(data)) {\n        return resolveProcessCredentials(options, profileName);\n    }\n    if (isSsoProfile(data)) {\n        return await resolveSsoCredentials(profileName, data, options);\n    }\n    throw new CredentialsProviderError(`Could not resolve credentials using profile: [${profileName}] in configuration/credentials file(s).`, { logger: options.logger });\n};\n","import { setCredentialFeature } from \"@aws-sdk/core/client\";\nexport const isWebIdentityProfile = (arg) => Boolean(arg) &&\n    typeof arg === \"object\" &&\n    typeof arg.web_identity_token_file === \"string\" &&\n    typeof arg.role_arn === \"string\" &&\n    [\"undefined\", \"string\"].indexOf(typeof arg.role_session_name) > -1;\nexport const resolveWebIdentityCredentials = async (profile, options) => import(\"@aws-sdk/credential-provider-web-identity\").then(({ fromTokenFile }) => fromTokenFile({\n    webIdentityTokenFile: profile.web_identity_token_file,\n    roleArn: profile.role_arn,\n    roleSessionName: profile.role_session_name,\n    roleAssumerWithWebIdentity: options.roleAssumerWithWebIdentity,\n    logger: options.logger,\n    parentClientConfig: options.parentClientConfig,\n})().then((creds) => setCredentialFeature(creds, \"CREDENTIALS_PROFILE_STS_WEB_ID_TOKEN\", \"q\")));\n","import { setCredentialFeature } from \"@aws-sdk/core/client\";\nexport const isProcessProfile = (arg) => Boolean(arg) && typeof arg === \"object\" && typeof arg.credential_process === \"string\";\nexport const resolveProcessCredentials = async (options, profile) => import(\"@aws-sdk/credential-provider-process\").then(({ fromProcess }) => fromProcess({\n    ...options,\n    profile,\n})().then((creds) => setCredentialFeature(creds, \"CREDENTIALS_PROFILE_PROCESS\", \"v\")));\n","import { setCredentialFeature } from \"@aws-sdk/core/client\";\nexport const resolveSsoCredentials = async (profile, profileData, options = {}) => {\n    const { fromSSO } = await import(\"@aws-sdk/credential-provider-sso\");\n    return fromSSO({\n        profile,\n        logger: options.logger,\n        parentClientConfig: options.parentClientConfig,\n        clientConfig: options.clientConfig,\n    })().then((creds) => {\n        if (profileData.sso_session) {\n            return setCredentialFeature(creds, \"CREDENTIALS_PROFILE_SSO\", \"r\");\n        }\n        else {\n            return setCredentialFeature(creds, \"CREDENTIALS_PROFILE_SSO_LEGACY\", \"t\");\n        }\n    });\n};\nexport const isSsoProfile = (arg) => arg &&\n    (typeof arg.sso_start_url === \"string\" ||\n        typeof arg.sso_account_id === \"string\" ||\n        typeof arg.sso_session === \"string\" ||\n        typeof arg.sso_region === \"string\" ||\n        typeof arg.sso_role_name === \"string\");\n","import { getProfileName, parseKnownFiles } from \"@smithy/shared-ini-file-loader\";\nimport { resolveProfileData } from \"./resolveProfileData\";\nexport const fromIni = (_init = {}) => async ({ callerClientConfig } = {}) => {\n    const init = {\n        ..._init,\n        parentClientConfig: {\n            ...callerClientConfig,\n            ..._init.parentClientConfig,\n        },\n    };\n    init.logger?.debug(\"@aws-sdk/credential-provider-ini - fromIni\");\n    const profiles = await parseKnownFiles(init);\n    return resolveProfileData(getProfileName({\n        profile: _init.profile ?? callerClientConfig?.profile,\n    }), profiles, init);\n};\n"],"names":["setNamedProvider","creds","setCredentialFeature","isAssumeRoleWithSourceProfile","arg","profile","logger","withSourceProfile","source_profile","credential_source","debug","isCredentialSourceProfile","withProviderProfile","resolveAssumeRoleCredentials","async","profileName","profiles","options","visitedProfiles","profileData","region","roleAssumer","getDefaultRoleAssumer","clientConfig","credentialProviderLogger","parentClientConfig","clientPlugins","Object","keys","join","sourceCredsProvider","resolveProfileData","isCredentialSourceWithoutRoleArn","credentialSource","sourceProvidersMap","EcsContainer","fromHttp","fromContainerMetadata","then","Ec2InstanceMetadata","fromInstanceMetadata","Environment","fromEnv","resolveCredentialSource","params","RoleArn","role_arn","RoleSessionName","role_session_name","Date","now","ExternalId","external_id","DurationSeconds","parseInt","duration_seconds","mfa_serial","mfaCodeProvider","tryNextLink","SerialNumber","TokenCode","sourceCreds","section","isStaticCredsProfile","Boolean","aws_access_key_id","aws_secret_access_key","indexOf","aws_session_token","aws_account_id","resolveStaticCredentials","credentials","accessKeyId","secretAccessKey","sessionToken","aws_credential_scope","credentialScope","accountId","isAssumeRoleRecursiveCall","data","length","isAssumeRoleProfile","web_identity_token_file","fromTokenFile","webIdentityTokenFile","roleArn","roleSessionName","roleAssumerWithWebIdentity","resolveWebIdentityCredentials","credential_process","isProcessProfile","fromProcess","resolveProcessCredentials","sso_start_url","sso_account_id","sso_session","sso_region","sso_role_name","isSsoProfile","fromSSO","resolveSsoCredentials","fromIni","_init","callerClientConfig","init"],"sourceRoot":""}